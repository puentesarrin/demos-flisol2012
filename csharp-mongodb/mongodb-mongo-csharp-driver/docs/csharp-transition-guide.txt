-*- Mode: outline -*-

How to port MongoDB client code from samus's mongodb-csharp to 10gen's
mongo-csharp-driver.

* Big picture

Most differences between the samus driver and the 10gen driver are
syntactic (names of classes and methods), and so can be detected at
compile time.  Consequently, a first pass through the compiler
followed by a fairly straightforward search-and-replace should do 90%
of the work.

* Using the libraries

10gen          	       	       	       	   samus
-----					   -----
using MongoDB.Bson;                        using MongoDB;
using MongoDB.Driver;
using MongoDB.Driver.GridFS;               using MongoDB.GridFS;

* Frequently-used classes

10gen          	       	       	       	   samus
-----					   -----
BsonDocument                               Document
MongoServer                                Mongo
MongoDatabase                              IMongoDatabase
MongoCollection         		   IMongoCollection
MongoCursor                                ICursor

* Connecting to a server

10gen
-----
// Connect to a server
MongoServer mongo = MongoServer.Create(connection_spec);

// Get a handle on a database
MongoDatabase db = mongo.GetDatabase(database_name);
// ... or...
MongoDatabase db = mongo[database_name];

// Get a handle on a collection.
MongoCollection<BsonDocument> coll = db.GetCollection<BsonDocument>(collection_name);
// ... or ...
MongoCollection<BsonDocument> coll = db[collection_name];

samus
-----
// Connect to a server
Mongo mongo = new Mongo(connection_spec);
mongo.Connect();

// Get a handle on a database
IMongoDatabase db = mongo.GetDatabase(database_name);
// ... or ...
IMongoDatabase db = mongo[database_name];

// Get a handle on a collection
IMongoCollection<Document> coll = db.GetCollection<Document>(collection_name);
// ... or ...
IMongoCollection<Document> coll = db[collection_name];

* Data manipulation

For the most part, data manipulations are similar between the drivers,
except that the samus driver handles updates differently in some
respects:

(0) the 10gen driver takes a selector document and then an update
    object, while the samus driver takes the update object and a
    selector document.

(1) The 10gen driver's Update has an overload that accepts an
    UpdateFlags value, which can specify whether to perform an upsert
    or a multi-update.  The samus driver always does an upsert if the
    update object has an _id attribute and uses a separate method,
    UpdateAll, to execute multi-updates.

10gen
-----
// Assume some MongoCollection<BsonDocument> coll.
MongoCollection<BsonDocument> coll = ...

// Insert.
BsonDocument doc = new BsonDocument { { "foo", "bar" }, { "baz", 42 } };
coll.Insert(doc);

// Update.
BsonDocument upd = new BsonDocument  { { "$set" , new BsonDocument { { "foo", "quux" } } } };
BsonDocument sel = new BsonDocument { { "baz", 42 } };
// NOTE that the selector comes first.
coll.Update(sel, upd, UpdateFlags.Multi);
// Remove.
BsonDocument rem = new BsonDocument { { "bar", 42 } } };
coll.Remove(sel);  
coll.Remove(rem);

samus
-----

// Assume some IMongoCollection<Document> coll.
IMongoCollection<Document> coll = ...

// Insert.
Document doc = new Document { { "foo", "bar" }, { "baz", 42 } };
coll.Insert(doc);

// Update.
Document upd = new Document { { "$set" , new Document { { "foo", "quux" } } } };
Document sel = new Document { { "baz", 42 } };
// NOTE that samus's Update's argument order is the reverse of 10gen's.
coll.UpdateAll(upd, sel);  

// Remove.
Document rem = new Document { { "bar", 42 } } };
coll.Remove(sel);
coll.Remove(rem);

* SafeMode implementations

samus's driver supports operation-level safe mode specification via
overloaded methods on Insert, Update, Save, Remove, e.g.,

coll.Insert(doc, true);      // insert doc with safe mode.
coll.Remove(sel, true);      // remove docs matching sel with safe mode
... etc.

The 10gen driver supports specifying the safe mode at 4 levels of
granularity: the server, the database, the collection, and the
operation.  Like the samus driver, a SafeMode instance can be supplied
as an argument to individual operations,

coll.Insert(doc, SafeMode.True);   // insert doc with safe mode.
coll.Remove(sel, SafeMode.True);   // remove docs matching sel with safe mode
... etc.

If no SafeMode is given to the operation, the operation's safe mode
will default to the collection's SafeMode property, which, in turn,
defaults to the database's SafeMode property, which, in turn, defaults
to the server connection's SafeMode property.  For example,

MongoServer m = new MongoServer.Create(connection_spec);
m.SafeMode(SafeMode.False);
MongoDatabase db = m.GetDatabase(database_name);
// At this point, db's SafeMode is "off".
db.SafeMode(SafeMode.True);
MongoCollection<BsonDocument> coll = db.GetCollection<BsonDocument>(coll_name);
// coll's SafeMode is "on".
// The following inserts in safe mode.
coll.Insert(new BsonDocument { { "foo" , "bar" } }); 
// The following inserts without safe mode.
coll.Insert(new BsonDocument { { "foo" , "baz" } } , SafeMode.False );  

* Querying

10gen
-----
// Assume some MongoCollection<BsonDocument> coll.
MongoCollection<BsonDocument> coll = ...
BsonDocument sel = new BsonDocument {};
MongoCursor<BsonDocument> cur = coll.Find(sel);
foreach (BsonDocument doc in cur) {
        // do something with doc.
}

samus
-----
// Assume some IMongoCollection<Document> coll
IMongoCollection<Document> coll = ...
Document sel = new Document {};
ICursor<Document> cur = coll.Find(sel);
foreach (Document d in cur.Documents) {
        Console.WriteLine("{0}", d);
}

** Count()

The Count() method in the two drivers is essentially equivalent.

** Skip and Limit

The Skip() and Limit() methods in the two drivers are essentially
equivalent.

** Sort()

The Sort() method in the two drivers is essentially equivalent.

* Advanced querying

** Map/Reduce

** group

** findandmodify

* Administrative commands

Several "administrative" operations in the samus driver are methods
belonging to a Metadata object associated with a Collection or
Database; in the 10gen driver, these belong to the Collection or
Database classes themselves.

** Indexes

The 10gen driver's MongoCollection class has methods, CreateIndex()
and EnsureIndex(), DropIndex(), DropAllIndexes(), for managing indexes
on a collection.  In the samus driver, the analogous methods belong to
the IMongoCollection's Metadata property.

** misc. commands.

*** DropCollection

In the 10gen driver, MongoDatabase has a method DropCollection(string
name).

In the samus driver, there are two methods, belonging to the
IMongoDatabase's Metadata property.  One of these takes a collection
name, the other takes a collection instance.

*** DropDatabase

In the 10gen driver, the MongoServer class has a method
DropDatabase(string name).

In the samus driver, the DatabaseMetadata instance associated with a
MongoDatabase has a DropDatabase() method that takes no arguments and
drops the MongoDatabase.

